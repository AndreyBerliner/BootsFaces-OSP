/*
 * Copyright 2014-2016 Riccardo Massera (TheCoder4.Eu)
 *
 * This file is part of BootsFaces.
 * BootsFaces is free software: you can redistribute it and/or modify it under the terms of 
 * the GNU General Public License as published by the Free Software Foundation, version 3 of the License.
 * 
 * BootsFaces is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; 
 * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
 * See the GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along with BootsFaces.
 * If not, see http://www.gnu.org/licenses/gpl-3.0.html
 */
 
// Apply the plugin to add support for Bootstrap download
plugins {
    id "de.undercouch.download" version "2.0.0"
}

import de.undercouch.gradle.tasks.download.Download

//Configuration
Properties props = new Properties()
props.load(new FileInputStream("${projectDir}/../build.properties"))

ext.BootswatchFullVersion = props['bootstrap.version']+props['bootswatch.subversion']

ext.downloadURL = 'https://github.com/thomaspark/bootswatch/archive/v'+BootswatchFullVersion+'.zip'
ext.zipFolder = 'bootswatch-'+BootswatchFullVersion.replace('+','-')
ext.zipFile = zipFolder+'.zip'
if(System.getProperty("BSF-THEME", "") != "") {
   //ext.theme = System.getProperty("BSF-THEME", "")
   ext.themes = System.getProperty("BSF-THEME", "").replaceAll("\\s","").tokenize(',')
} else {
   //ext.theme = props['bootswatch.theme']
   ext.themes= props['bootswatch.theme'].replaceAll("\\s","").tokenize(',')
}

def bootswatchZip = new File(buildDir, zipFile)

     
task themesTask {
   themes.each {
   println "Theme ${it}"
}
}

/**
 * The following two tasks download a ZIP file and extract its
 * contents to the build directory
 */
task downloadBootswatchZipFile(type: Download) {
    src downloadURL
    dest new File(buildDir, zipFile)
}
downloadBootswatchZipFile.onlyIf { !bootswatchZip.exists() }

/*
task downloadAndUnzipBootswatch(dependsOn: downloadBootswatchZipFile, type: Copy) {
    from zipTree(bootswatchZip)
    into 'Bootswatch'
    include zipFolder+"/"+theme+"/*.less"
}*/

themes.each { 
    //create a dynamic task for each theme
    def targetName ->
    tasks.create(name: "themeTask$targetName", dependsOn: downloadBootswatchZipFile, type: Copy) { 
        println "Copy bootswatch Theme themeTask$targetName"
        from zipTree(bootswatchZip)
        into "${projectDir}/Bootswatch"
        include zipFolder+"/"+targetName+"/*.less"
        doLast {
            
            //Patch for Font URL in Bootswatch v3.3.5+3 and later
            def lessfile="${projectDir}/Bootswatch/"+zipFolder+"/"+targetName+"/bootswatch.less"
            println 'INFO - patching:'+lessfile
            def bswFile = new File( lessfile )
            String contents = bswFile.getText( 'UTF-8' )

            def fonturlexp=/(\@[A-Za-z\-\_]*font[A-Za-z\-\_]*)\s*\:\s*\"(http[^"]+)\"\s*\;/
            def matcher = (contents=~ fonturlexp)
            if (matcher.getCount()>0) {
                def fontvar=matcher[0][1]
                def fonturl=matcher[0][2]
                contents=contents.replaceFirst(/\s*\@import\s+url\(\s*"\@\{\w+\}"\s*\)\s*\;/,'')
                contents=contents.replaceFirst(/\.[A-Za-z\-\_]+\s*\(\s*${fontvar}\s*\)\s*\;/,'')
                contents=contents.replaceFirst( fonturlexp ) { '@import url("'+it[2]+'");' }
            }

            bswFile.write( contents, 'UTF-8' )
        }
    }
}

task themesTaskAll (dependsOn: ['downloadBootswatchZipFile',tasks.matching { Task task -> task.name.startsWith("themeTask")}]) {
println "Processing Themes"
}

