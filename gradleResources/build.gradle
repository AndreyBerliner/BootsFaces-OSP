/*
 * Copyright 2014-2015 Riccardo Massera (TheCoder4.Eu)
 *
 * This file is part of BootsFaces.
 * BootsFaces is free software: you can redistribute it and/or modify it under the terms of
 * the GNU General Public License as published by the Free Software Foundation, version 3 of the License.
 *
 * BootsFaces is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
 * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along with BootsFaces.
 * If not, see http://www.gnu.org/licenses/gpl-3.0.html
 */

Properties props = new Properties()
props.load(new FileInputStream("${projectDir}/../build.properties"))
ext.BootstrapVersion = props['bootstrap.version']

ext.BootswatchFullVersion = props['bootstrap.version']+props['bootswatch.subversion']
ext.BootswatchFolder = 'Bootswatch/bootswatch-'+BootswatchFullVersion.replace('+','-')
ext.theme = props['bootswatch.theme']

task getBootstrap(type: GradleBuild) {
  description 'BootsFaces task: downloads and unzips Bootstrap.'
    buildFile = 'bootstrap.gradle'
    tasks = ['downloadAndUnzipBootstrap']
}

task getBootswatchTheme(type: GradleBuild) {
  description 'BootsFaces task: downloads and unzips Bootswatch Theme.'
  println 'Task= getBootswatchTheme:'
    buildFile = 'bootswatch.gradle'
    tasks = ['downloadAndUnzipBootswatch']
}
getBootswatchTheme.onlyIf { theme.length() > 1}

task copyBootswatchLess(type: Copy) {
  description 'BootsFaces task: copies the Bootswatch less files to the process folder.'
  println 'copyBootswatchLess:'+BootswatchFolder+'/'+theme
  from BootswatchFolder+'/'+theme
  into "${buildDir}/process/less"
  
  //rename 'variables.less', 'extra-variables.less'
  rename 'bootswatch.less', 'extra-theme.less'
}
copyBootswatchLess.doLast {
    //Patch for Font URL in Bootswatch v3.3.5+3 and later
    def lessfile="${buildDir}/process/less/extra-theme.less"
    def bswFile = new File( lessfile )
    String contents = bswFile.getText( 'UTF-8' )
    
    def fonturlexp=/(\@[A-Za-z\-\_]*font[A-Za-z\-\_]*)\s*\:\s*\"(http[^"]+)\"\s*\;/
    def matcher = (contents=~ fonturlexp)
    if (matcher.getCount()>0) {
        def fontvar=matcher[0][1]
        def fonturl=matcher[0][2]
        println(matcher.getCount()+ " web font occurrence found.");
        println(" font var: " + fontvar )
        println(" font URL:" + fonturl )
        contents=contents.replaceFirst(/\s*\@import\s+url\(\s*"\@\{\w+\}"\s*\)\s*\;/,'')
        contents=contents.replaceFirst(/\.[A-Za-z\-\_]+\s*\(\s*${fontvar}\s*\)\s*\;/,'')
        contents=contents.replaceFirst( fonturlexp ) { '@import url("'+it[2]+'");' }
    }

    bswFile.write( contents, 'UTF-8' )
}
copyBootswatchLess.onlyIf { theme.length() > 1}

task addBootswatchTheme(dependsOn: ['getBootswatchTheme']) {
     println 'Task= addBootswatchTheme:'
}
copyBootswatchLess.mustRunAfter getBootswatchTheme


task copyOriginalLess(type: Copy) {
  description 'BootsFaces task: copies the Bootstrap less folders to the process folder.'
  from 'Bootstrap/bootstrap-'+BootstrapVersion+'/less'
  into "${buildDir}/process/less"
}
task copyBootstrapFonts(type: Copy) {
  description 'BootsFaces task: copies the Bootstrap fonts to the process folder.'
  from 'Bootstrap/bootstrap-'+BootstrapVersion+'/fonts'
  into "${buildDir}/resources/META-INF/resources/fonts"
}
task copyBootstrapJs(type: Copy) {
  description 'BootsFaces task: copies the Bootstrap JavaScript files to the process folder.'
  from 'Bootstrap/bootstrap-'+BootstrapVersion+'/js'
  include '*.js'
  exclude 'affix.js', 'popover.js', 'scrollspy.js'
  filter{String line -> line.startsWith('/* ') ? line.replace('/* ', '/** @license ') : line }
  into "${buildDir}/process/js"
}
task copyBootsFacesLess(type: Copy) {
  description 'BootsFaces task: copies the BootsFaces bs-*.less files to the process folder.'
  from 'less'
  into "${buildDir}/process/less"
}
task copyBootsFacesFiles(type: Copy) {
  description 'BootsFaces task: copies the BootsFaces resource files to the process folder and adds the license.'
  from 'css/bsf.css'
  from 'js/bsf.js'
  filter{String line -> line.startsWith('/*!') ? line.replace('/*!', '/** @license ') : line }

  into "${buildDir}/process"
}
task copyCssResources(type: Copy) {
  description 'BootsFaces task: copies additional CSS files to the target folder (i.e. files that are not part of Bootstrap).'
  from 'css/bootstrap-multiselect.css'
  from 'css/bootstrap-switch.css'
  from 'css/dataTables.bootstrap.min.css'
  from 'css/dropdowns.css'
  from 'css/dropdown-submenu.css'
  from 'css/jq.ui.core.css'
  from 'css/jq.ui.datepicker.css'
  from 'css/jq.ui.slider.css'
  from 'css/jq.ui.theme.css'

  into "${buildDir}/resources/META-INF/resources/bsf/css"
}
task copyJsResources(type: Copy) {
  description 'BootsFaces task: copies additional JS files to the target folder (i.e. files that are not part of Bootstrap).'
  from 'js/bootstrap-multiselect-collapsible-groups.js'
  from 'js/bootstrap-multiselect.js'
  from 'js/bootstrap-switch.js'
  from 'js/jquery.dataTables.min.js'
  from 'js/dataTables.bootstrap.min.js'
  from 'ie8support/respond.js'
  from 'ie8support/html5shiv.js'

  into "${buildDir}/resources/META-INF/resources/bsf/js"
}
task copyJqResources(type: Copy) {
  description 'BootsFaces task: copies the jQuery JS files to the target folder.'
  from 'jq'
  into "${buildDir}/resources/META-INF/resources/bsf/jq"
}
/*
task copyFonts(type: Copy) {
  from 'fonts'
  into "${buildDir}/resources/META-INF/resources/fonts"
}
*/
task copyFiles2Process(dependsOn: ['copyOriginalLess', 'copyBootsFacesLess', 'copyBootsFacesFiles', 'copyBootstrapFonts', 'copyBootstrapJs','copyBootswatchLess']) {

}

task copyBootsFacesResources(dependsOn: ['copyCssResources', 'copyJsResources', 'copyJqResources']) { ////, 'copyFonts']) {

}
task lesscss(type: GradleBuild) {
    description 'BootsFaces task: compiles the bs*.less files to *.css files.'
    buildFile = 'lessc.gradle'
    tasks = ['assetCompile']
}


task copyAssetCss2Resources(type: Copy) {
    description 'BootsFaces task: copies the CSS files generated from the bs-*.less files to the target folder.'
    from "${buildDir}/assets/less"
    into "${buildDir}/resources/META-INF/resources/bsf/css"
    // Use a closure to map the file name
    rename { String fileName ->
        fileName.replace('bs-', '')
    }
}

task copyAssetJs2Resources(type: Copy) {
    description 'BootsFaces task: copies the Bootstrap JS file to the target folder.'
    from "${buildDir}/assets/js"
    into "${buildDir}/resources/META-INF/resources/bsf/js"
}
task copyBsfCss(type: Copy) {
  description 'BootsFaces task: copies the bsf.css file, which contains special additions needed by BootsFaces.'
  from "${buildDir}/assets/bsf.css"
  into "${buildDir}/resources/META-INF/resources/bsf/css"
}
task copyBsfJs(type: Copy) {
  description 'BootsFaces task: copies the bsf.js file. bsf.js contains the AJAX JS engine of BootsFaces.'
  from "${buildDir}/assets/bsf.js"
  into "${buildDir}/resources/META-INF/resources/bsf/js"
}

task copyAssetResources(dependsOn: ['copyAssetCss2Resources', 'copyAssetJs2Resources', 'copyBsfCss', 'copyBsfJs']) {

}

task cleanMavenResources(type: Delete) {
  description 'BootsFaces task: deletes every file in the mavenResource folder.'
  delete fileTree(dir: "${projectDir}/../mavenResources", exclude: "readme.txt")
}

task updateMavenResources(type: Copy) {
  description 'BootsFaces task: replaces every file in the mavenResource folder by the file generated by the Gradle build.'
  from "${buildDir}/resources/"
  into "${projectDir}/../mavenResources"
}

getBootstrap.mustRunAfter copyBootsFacesResources
//addBootswatchTheme.mustRunAfter getBootstrap
//copyFiles2Process.mustRunAfter addBootswatchTheme
copyBootswatchLess.mustRunAfter copyOriginalLess
copyFiles2Process.mustRunAfter getBootstrap
addBootswatchTheme.mustRunAfter copyFiles2Process
lesscss.mustRunAfter copyFiles2Process
copyAssetResources.mustRunAfter lesscss

task buildResources(dependsOn: ['copyBootsFacesResources', 'getBootstrap', 'copyFiles2Process', 'addBootswatchTheme', 'lesscss', 'copyAssetResources',
                                'cleanMavenResources', 'updateMavenResources']) {
   description 'BootsFaces task: downloads Bootstrap from the internet and generates both the mavenResource folder and the Gradle resource folder from scratch.'
                                

}

//defaultTasks 'lesscss'
