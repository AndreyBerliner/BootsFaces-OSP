<?xml version="1.0" encoding="utf-8"?>
<project name="BootsFaces-OSP" default="library-jar" basedir=".">
	<!--
	 * Copyright 2014 Riccardo Massera (TheCoder4.Eu)
	 *
	 * This file is part of BootsFaces.
	 * BootsFaces is free software: you can redistribute it and/or modify it under the terms of 
	 * the GNU General Public License as published by the Free Software Foundation, version 3 of the License.
	 * 
	 * BootsFaces is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; 
	 * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
	 * See the GNU General Public License for more details.
	 *
	 * You should have received a copy of the GNU General Public License along with BootsFaces.
	 * If not, see http://www.gnu.org/licenses/gpl-3.0.html
	-->
	<description>
	        BootsFaces Library OSP(Open Source Project) build and dist
	</description>
	
	<taskdef name="xmltask" classname="com.oopsconsultancy.xmltask.ant.XmlTask">
		<classpath>
		    <pathelement location="lib/xmltask.jar"/>
		</classpath>
	</taskdef>
	
	<!-- Load Global properties -->
	<property file="build.properties" />
	
	<target name="init">
		<echo message="Starting ${ant.project.name} Build."/>
		<echo message="BootsFaces version ${VERSION}" />
		<echo message="${ant.version} running on ${os.name} ${os.version}"/>
		<echo message="User: ${user.name}"/>
		
		<!-- set variables for compilation options -->
		<!-- CSS -->
		<property name="minifycssfiles" value="on"/>
		<condition property="minifycss"><equals arg1="${minifycssfiles}" arg2="on"/></condition>
		<condition property="min.css.suffix" value="-min"><equals arg1="${minifycssfiles}" arg2="on"/></condition>
		<!-- JS -->
		<property name="minifyjsfiles" value="on"/>
		<condition property="minifyjs"><equals arg1="${minifyjsfiles}" arg2="on"/></condition>
		<condition property="min.js.suffix" value="-min"><equals arg1="${minifyjsfiles}" arg2="on"/></condition>
		<!-- Java -->
        <property name="deprecation" value="off"/>
        <property name="debug" value="on"/>
    	<property name="source-compliance" value="1.6"/>
    	<property name="class-compliance" value="1.6"/>
		<property name="bsf.jar" value="${dist.dir}/BootsFaces-OSP-${VERSION}.jar"/>
	
		<!-- detect OS family -->
		<condition property="os.unix">
			<os family="unix" />
		</condition>
		<condition property="os.windows">
			<os family="windows" />
		</condition>
		
		<property file="bsf.properties"/>
		<echo message="os.unix ${os.unix}"/>
		<echo message="os.windows ${os.windows}"/>
		<echo message="alert ${bsf.alert}"/>
		<echo message="min css suffix ${min.css.suffix}"/>
		<echo message="min js suffix ${min.js.suffix}"/>
		<!-- read version -->
        <!--property file="VERSION.properties" prefix="osp"/-->
		
    </target>
	
	<!-- Distribution building -->
	<target name="create-build" description="Creates BootsFaces build dir.">
	<mkdir dir="${build.dir}"/>
	<delete includeemptydirs="true">
	    <fileset dir="${build.dir}" includes="**/*"/>
	</delete>
	<mkdir dir="${metainf.dir}"/>
	<!--delete><fileset dir="${meta.dir}"><include name="*"/></fileset></delete-->
	<mkdir dir="${resources.dir}"/>
	<mkdir dir="${less.dir}"/>
	<mkdir dir="${css.dir}"/>
	<delete><fileset dir="${css.dir}"><include name="*"/></fileset></delete>
	<mkdir dir="${js.dir}"/>
	<delete><fileset dir="${js.dir}"><include name="*"/></fileset></delete>
	<mkdir dir="${jq.dir}"/>
	<delete><fileset dir="${jq.dir}"><include name="*"/></fileset></delete>
	<mkdir dir="${jq.ui.dir}"/>
	<delete><fileset dir="${jq.ui.dir}"><include name="*"/></fileset></delete>
	<mkdir dir="${jq.i18n.dir}"/>
	<mkdir dir="${fonts.dir}"/>
	<delete><fileset dir="${fonts.dir}"><include name="*"/></fileset></delete>
	</target>
	
	<target name="copy-core" depends="create-build" description="Copies BootsFaces core needed files to the build dir.">
		<echo message="Copying less files"/>
		<copy todir="${less.dir}">
		  <fileset dir="${less.orig.dir}" includes="**/*.less"/>
		</copy>
		<copy todir="${less.dir}">
		  <fileset dir="${bsf.less.dir}" includes="**/*.less"/>
		</copy>
		<!--copy file="${dest.dir}/variables-custom.less" todir="${less.dir}"/-->
		<copy file="${bsf.css.orig.dir}/bsf.css" todir="${css.dir}"/>
		<echo message="Copying core js files"/>
		<copy file="${bsf.jq.orig.dir}/jquery.js" todir="${jq.dir}"/>
		<copy file="${bsf.js.orig.dir}/bsf.js" todir="${js.dir}"/>
		<copy file="${bsf.js.orig.dir}/html5shiv.js" todir="${js.dir}"/>
		<copy file="${bsf.js.orig.dir}/respond.js" todir="${js.dir}"/>
		<echo message="Copying Fonts"/>
		<copy todir="${fonts.dir}">
		  <fileset dir="${fonts.orig.dir}" includes="*"/>
		</copy>
		<antcall target="copy-jqueryui-core"/>
	</target>
	
	<target name="copy-jqueryui-core" description="Copies jQuery UI core css/js to resources.">
	<copy file="${bsf.css.orig.dir}/jq.ui.core.css" todir="${css.dir}"/>
	<copy file="${bsf.css.orig.dir}/jq.ui.theme.css" todir="${css.dir}"/>
	<copy file="${bsf.jq.ui.orig.dir}/core.js" todir="${jq.ui.dir}"/>
	<copy file="${bsf.jq.ui.orig.dir}/mouse.js" todir="${jq.ui.dir}"/>
	<copy file="${bsf.jq.ui.orig.dir}/widget.js" todir="${jq.ui.dir}"/>
	</target>
	
	<target name="metainf" description="Removes unwanted components from the taglib, copies taglib and license files to META-INF.">
		<echo message="Adding Tag Definitions, License in META-INF..."/>
		<xmltask source="${meta.dir}/bootsfaces-b.full.taglib.xml" dest="${meta.dir}/bootsfaces-b.taglib.xml"> 
		 	<remove path="/:facelet-taglib/:tag[:tag-name/text() = 'alert']" unless="bsf.alert"/>
		 	<remove path="/:facelet-taglib/:tag[:tag-name/text() = 'badge']" unless="bsf.badge"/>
		 	<!--remove path="/:facelet-taglib/:tag[:tag-name/text() = 'buttonGroup']" unless="bsf.buttongroup"/>
		 	<remove path="/:facelet-taglib/:tag[:tag-name/text() = 'buttonToolbar']" unless="bsf.buttongroup"/-->
		 	<remove path="/:facelet-taglib/:tag[:tag-name/text() = 'dropButton']" unless="bsf.dropbutton"/>
		 	<remove path="/:facelet-taglib/:tag[:tag-name/text() = 'jumbotron']" unless="bsf.jumbotron"/>
		 	<remove path="/:facelet-taglib/:tag[:tag-name/text() = 'label']" unless="bsf.label"/>
			<remove path="/:facelet-taglib/:tag[:tag-name/text() = 'modal']" unless="bsf.modal"/>
			<remove path="/:facelet-taglib/:tag[:tag-name/text() = 'navBar']" unless="bsf.navbar"/>
			<remove path="/:facelet-taglib/:tag[:tag-name/text() = 'navbarLinks']" unless="bsf.navbar"/>
			<remove path="/:facelet-taglib/:tag[:tag-name/text() = 'dropMenu']" unless="bsf.navbar"/>
			<remove path="/:facelet-taglib/:tag[:tag-name/text() = 'panel']" unless="bsf.panel"/>
			<remove path="/:facelet-taglib/:tag[:tag-name/text() = 'thumbnail']" unless="bsf.thumbnail"/>
			<remove path="/:facelet-taglib/:tag[:tag-name/text() = 'well']" unless="bsf.well"/>
			<remove path="/:facelet-taglib/:tag[:tag-name/text() = 'datepicker']" unless="bsf.datepicker"/>
			<remove path="/:facelet-taglib/:tag[:tag-name/text() = 'slider']" unless="bsf.slider"/>
		</xmltask>
		<copy file="${meta.dir}/LICENSE" todir="${metainf.dir}"/>
		<copy file="${meta.dir}/bootsfaces-b.taglib.xml" todir="${metainf.dir}"/>
		<copy file="${meta.dir}/faces-config.xml" todir="${metainf.dir}"/>
	</target>
	
	<!-- Java compilation and Jar Building -->
	<target name="compile-java" description="Compile java sources">
		<javac srcdir="${src.dir}"
		               destdir="${build.dir}"
		               fork="yes"
		               debug="${debug}"
		               deprecation="${deprecation}"
		               nowarn="on"
		        	   source="${source-compliance}"
		        	   target="${class-compliance}"
					   >
		            <classpath>
		            	<pathelement location="lib/javax.faces-2.2.8-02.jar"/>
		            	<pathelement location="lib/javax.el-3.0.0.jar"/>
		            	<pathelement location="lib/javax.servlet-api-3.1.0.jar"/>
		            	<!--
		                <pathelement location="lib/javax.faces.jar"/>
		                <pathelement location="lib/javax.el.jar"/-->
		            </classpath>
		            <include name="net/**"/>
		</javac>
	</target>
	
    <target name="createjar" depends="compile-java" description="Builds the distribution JAR.">
        <echo>Creating Custom BootsFaces jar...</echo>
        <tstamp>
            <format property="NOW" pattern="yyyy-MM-dd HH:mm:ss z" />
        </tstamp>

        <echo>dist.dir: ${dist.dir}</echo>
        <jar destfile="${bsf.jar}" update="true">
            <fileset dir="${build.dir}">
            	<exclude name="less*/" />
            </fileset>
            <manifest>
                <attribute name="Built-By" value="BootsFaces OSP Ant builder."/>
                <attribute name="Bundle-Name" value="BootsFaces" />           
                <attribute name="Bundle-Version" value="${VERSION}" />
                <attribute name="Bundle-Date" value="${NOW}" />
                <attribute name="Implementation-Title" value="BootsFaces" />
                <attribute name="Implementation-Version" value="${VERSION}" />
                <attribute name="Implementation-Vendor" value="TheCoder4.eu" />
                <attribute name="Implementation-Vendor-Id" value="eu.thecoder4" />
                <attribute name="Implementation-URL" value="http://www.bootsfaces.net" />
            </manifest>
        </jar>
    </target>
	<target name="minify">
			<antcall target="yui-compress-js" />
			<antcall target="yui-compress-css" />
		</target>
	<target name="yui-compress-js" description="Compress JS." if="minifyjs">
		<echo message="Minifying JS..." />
		<apply executable="java" parallel="false">
		    <fileset dir="${js.dir}" includes="*.js" />
		    <arg line="-jar" />
		    <arg path="lib/yuicompressor-2.4.8.jar" />
		    <srcfile />
		    <arg line="-o" />
		    <mapper type="glob" from="*.js" to="${js.dir}/*-min.js" />
		    <targetfile />
		</apply>
		<move todir="${js.dir}" includeemptydirs="false">
		    <fileset dir="${js.dir}"/>
		    <mapper type="glob" from="*-min.js" to="*.js"/>
		</move>
	</target>
	
	<target name="yui-compress-css" description="Compress CSS." if="minifycss">
		<echo message="Minifying CSS..." />
		<apply executable="java" parallel="false">
		    <fileset dir="${less.dir}" includes="*.css" />
		    <arg line="-jar" />
		    <arg path="lib/yuicompressor-2.4.8.jar" />
		    <srcfile />
		    <arg line="-o" />
		    <mapper type="glob" from="*.css" to="${less.dir}/*-min.css" />
		    <targetfile />
		</apply>
	</target>
	
	<target name="compile-lesscss">
		<antcall target="compile-lesscss-windows" />
		<antcall target="compile-lesscss-unix" />
	</target>
	
	<target name="compile-lesscss-windows" if="os.windows">
		<echo message="Compiling LessCSS to CSS (windows platform WITH NodeJS)..." />
		<exec executable="cmd.exe" dir="${directory}">
			<arg value="${env.USER_HOME_DIRECTORY}/AppData/Roaming/npm/lessc"/>
			<arg value="${input}"/>
			<arg value="../css/${output}"/>
		</exec>
	</target>
	<target name="compile-lesscss-unix" if="os.unix">
		<echo message="Compiling LessCSS to CSS (*nix platform)..." />
		<exec executable="which" resolveexecutable="true" outputproperty="lessc.cmd">
			<arg value="lessc"/>
		</exec>
		<echo message="Lessc :${lessc.cmd}" />
		<!--property name="pathToNode" value="/usr/local/bin" /-->
		<apply executable="${lessc.cmd}" dest="${less.dir}">
			<srcfile/>
			<targetfile/>
			  
		    <fileset dir="${less.dir}" includes="bs-*.less"/>
			<mapper type="glob" from="bs-*.less" to="*.css"/>
	    </apply>
		<!--exec executable="/usr/local/bin/lessc" dir="${directory}">
			<env key="PATH" value="${env.PATH}:${pathToNode}" />
			<arg value="${input}"/>
			<arg value="../css/${output}"/>
		</exec-->
	</target>
	
	<!-- BootsFaces components depending on Bootstrap javascripts -->
	<target name="alert" if="bsf.alert">
		<echo message="Adding Bootstrap alert"/>
		<copy file="${js.orig.dir}/alert.js" todir="${js.dir}">
		 <filterchain><concatfilter prepend="${bootstrap.dir}/Bootstrap-license-${bootstrap.version}.txt"/></filterchain>
		</copy>
		<copy file="${less.dir}/alerts${min.css.suffix}.css" tofile="${css.dir}/alerts.css">
			<filterchain><concatfilter prepend="${bootstrap.dir}/Bootstrap-license-${bootstrap.version}.txt"/></filterchain>
		</copy>
	</target>
	<target name="dropdown"><!-- dropdown js, css needed for dropButton and dropMenu (navbar) -->
		<echo message="Adding Bootstrap dropdown (needed fo dropButton e dropMenu in navbars)"/>
		<copy file="${js.orig.dir}/dropdown.js" todir="${js.dir}">
		 <filterchain><concatfilter prepend="${bootstrap.dir}/Bootstrap-license-${bootstrap.version}.txt"/></filterchain>
		</copy>
		<copy file="${less.dir}/dropdowns${min.css.suffix}.css" tofile="${css.dir}/dropdowns.css">
			<filterchain><concatfilter prepend="${bootstrap.dir}/Bootstrap-license-${bootstrap.version}.txt"/></filterchain>
		</copy>
	</target>
	<target name="dropbutton" if="bsf.dropbutton" depends="dropdown">
		<echo message="Adding Bootstrap dropButton"/>
	</target>
	<target name="modal" if="bsf.modal">
		<echo message="Adding Bootstrap modal"/>
		<copy file="${js.orig.dir}/modal.js" todir="${js.dir}">
		 <filterchain><concatfilter prepend="${bootstrap.dir}/Bootstrap-license-${bootstrap.version}.txt"/></filterchain>
		</copy>
		<copy file="${less.dir}/modals${min.css.suffix}.css" tofile="${css.dir}/modals.css">
			<filterchain><concatfilter prepend="${bootstrap.dir}/Bootstrap-license-${bootstrap.version}.txt"/></filterchain>
		</copy>
	</target>
	<target name="navbar" if="bsf.navbar" depends="dropdown">
		<echo message="Adding Bootstrap navbar"/>
		<copy file="${js.orig.dir}/collapse.js" todir="${js.dir}">
		 <filterchain><concatfilter prepend="${bootstrap.dir}/Bootstrap-license-${bootstrap.version}.txt"/></filterchain>
		</copy>
		<copy file="${less.dir}/navbar${min.css.suffix}.css" tofile="${css.dir}/navbar.css">
			<filterchain><concatfilter prepend="${bootstrap.dir}/Bootstrap-license-${bootstrap.version}.txt"/></filterchain>
		</copy>
	</target>
	<!-- BootsFaces widget components -->
	<target name="badge" if="bsf.badge">
		<echo message="Adding Bootstrap Badge"/>
		<copy file="${less.dir}/badges${min.css.suffix}.css" tofile="${css.dir}/badges.css">
			<filterchain><concatfilter prepend="${bootstrap.dir}/Bootstrap-license-${bootstrap.version}.txt"/></filterchain>
		</copy>
	</target>
	<target name="label" if="bsf.label">
		<echo message="Adding Bootstrap Label"/>
		<copy file="${less.dir}/labels${min.css.suffix}.css" tofile="${css.dir}/labels.css">
			<filterchain><concatfilter prepend="${bootstrap.dir}/Bootstrap-license-${bootstrap.version}.txt"/></filterchain>
		</copy>
	</target>
	<target name="thumbnail" if="bsf.thumbnail">
		<echo message="Adding Bootstrap Label"/>
		<copy file="${less.dir}/thumbnails${min.css.suffix}.css" tofile="${css.dir}/thumbnails.css">
			<filterchain><concatfilter prepend="${bootstrap.dir}/Bootstrap-license-${bootstrap.version}.txt"/></filterchain>
		</copy>
	</target>
	<!-- BootsFaces layout components -->
	<target name="jumbotron" if="bsf.jumbotron">
	<echo message="Adding Bootstrap jumbotron"/>
		<copy file="${less.dir}/jumbotron${min.css.suffix}.css" tofile="${css.dir}/jumbotron.css">
			<filterchain><concatfilter prepend="${bootstrap.dir}/Bootstrap-license-${bootstrap.version}.txt"/></filterchain>
		</copy>
	</target> 
	<target name="panel" if="bsf.panel">
		<echo message="Adding Bootstrap panel"/>
		<copy file="${less.dir}/panels${min.css.suffix}.css" tofile="${css.dir}/panels.css">
			<filterchain><concatfilter prepend="${bootstrap.dir}/Bootstrap-license-${bootstrap.version}.txt"/></filterchain>
		</copy>
	</target> 
	<target name="well" if="bsf.well">
		<echo message="Adding Bootstrap well"/>
		<copy file="${less.dir}/wells${min.css.suffix}.css" tofile="${css.dir}/wells.css">
			<filterchain><concatfilter prepend="${bootstrap.dir}/Bootstrap-license-${bootstrap.version}.txt"/></filterchain>
		</copy>
	</target>
	<!-- BootsFaces jQuery components -->
	<target name="datepicker" if="bsf.datepicker" depends="copy-jqueryui-core">
	<echo message="Adding Bootstrap datepicker"/>
	<copy file="${bsf.css.orig.dir}/jq.ui.datepicker.css" todir="${css.dir}"/>
	<copy file="${bsf.jq.ui.orig.dir}/datepicker.js" todir="${jq.ui.dir}"/>
	<copy file="${bsf.jq.ui.orig.dir}/datepicker.js" todir="${jq.ui.dir}"/>
	<copy todir="${jq.i18n.dir}">
	  <fileset dir="${bsf.jq.i18n.orig.dir}" includes="*"/>
	</copy>
	</target> 
	<target name="slider" if="bsf.slider" depends="copy-jqueryui-core">
		<echo message="Adding Bootstrap slider"/>
		<copy file="${bsf.css.orig.dir}/jq.ui.slider.css" todir="${css.dir}"/>
		<copy file="${bsf.jq.ui.orig.dir}/slider.js" todir="${jq.ui.dir}"/>
		<copy file="${less.dir}/badges${min.css.suffix}.css" tofile="${css.dir}/badges.css">
			<filterchain><concatfilter prepend="${bootstrap.dir}/Bootstrap-license-${bootstrap.version}.txt"/></filterchain>
		</copy>
	</target> 
	<target name="components-bootstrap-js" depends="alert,dropbutton,modal,navbar">
		<echo message="Adding Bootstrap components."/>
	</target>
	<target name="components-bootsfaces" depends="badge,jumbotron,label,panel,thumbnail,well"><!-- ,tooltip,popover,carousel,tab,collapse" -->
			<echo message="Adding Bootstrap components."/>
		</target>
	<target name="components-jquery" depends="datepicker,slider">
			<echo message="Adding Bootstrap components."/>
		</target>
	<target name="components">
		<echo message="Components building started..."/>
		<echo message="Adding Bootstrap Core."/>
		<copy file="${less.dir}/core${min.css.suffix}.css" tofile="${css.dir}/core.css">
			<filterchain><concatfilter prepend="${bootstrap.dir}/Bootstrap-license-${bootstrap.version}.txt"/></filterchain>
		</copy>
		<copy file="${less.dir}/theme${min.css.suffix}.css" tofile="${css.dir}/theme.css">
			<filterchain><concatfilter prepend="${bootstrap.dir}/Bootstrap-license-${bootstrap.version}.txt"/></filterchain>
		</copy>
		<antcall target="components-bootstrap-js"/>
		<antcall target="components-bootsfaces"/>
		<antcall target="components-jquery"/>
	</target>
	
	<target name="build-resources">
		<echo message="Adding necessary resources in META-INF..."/>
		<antcall target="copy-core"/>
		
		<antcall target="metainf"/>
		<antcall target="compile-lesscss"/>
		<antcall target="yui-compress-css" />
		<antcall target="components"/>
		<antcall target="yui-compress-js" />
		
	</target>
	
	<!-- Main Task -->
	<target name="library-jar" depends="init">
		<echo message="Library jar building started..."/>
		<!-- Clean up -->
		<antcall target="clean"/>
		<antcall target="build-resources"/>
		<antcall target="createjar"/>
	</target>
	
	<target name="clean" description="Clean up">
		<echo>Cleaning up...</echo>
		<delete dir="${build.dir}" />
		<delete file="${bsf.jar}"/>
	</target>
	
	<!-- JAR Optimization with Proguard. -->
	
    <target name="post-dist" description="Optimize jar with Proguard">
    	<delete dir="optimized"/>
    	<mkdir dir="optimized"/>
    	<!-- read version >
    	<property file="VERSION.properties" prefix="bsf"/-->
    	<echo message="version ${VERSION}" />
    	<property name="bsf.jar" value="${dist.dir}/BootsFaces-OSP-${VERSION}.jar"/>
        <property name="optimized.jar" value="optimized/BootsFaces-OSP-dist-${VERSION}.jar"/>
    	
    	
        <property name="proguard.jar.path" value="lib/proguard.jar" />
        <property name="java.home.path" value="${java.home}" />

        <taskdef resource="proguard/ant/task.properties"
             classpath="${proguard.jar.path}" />
    
        <echo message="Java JDK version : ${java.specification.version}..."/>
        <echo message="Optimizing dist/BootsFaces-${VERSION}.jar..."/>
        <echo message="Proguard path: ${proguard.jar.path}"/>
        <echo message="Java Home path: ${java.home.path}"/>
        
        <proguard printmapping="optimized/BootsFaces-${VERSION}-dist.map"
              renamesourcefileattribute="SourceFile" ignorewarnings="true">
        
            <!-- Specify the input jars, output jars, and library jars. -->
            <injar  file="${bsf.jar}" />
            <outjar file="${optimized.jar}" />
        
            <!--libraryjar path="${javac.classpath}" />
            <libraryjar path="${j2ee.platform.classpath}" /-->
        	<libraryjar path="lib" />
            <libraryjar file="${java.home.path}/lib/rt.jar" />
            
            <!-- Keep some useful attributes. -->

        <keepattribute name="InnerClasses" />
        <keepattribute name="SourceFile" />
        <keepattribute name="LineNumberTable" />
        <keepattribute name="Deprecated" />
        <keepattribute name="*Annotation*" />
        <keepattribute name="Signature" />
        
        <!-- Preserve all public classes, and their public and protected fields and methods. -->

        <keep access="public" allowoptimization="true">
            <field  access="public protected" />
            <method access="public protected" />
        </keep>
        
        
        <!-- Preserve all .class method names. -->

        <keepclassmembernames access="public">
            <method type      ="java.lang.Class"
                    name      ="class$"
                    parameters="java.lang.String" />
            <method type      ="java.lang.Class"
                    name      ="class$"
                    parameters="java.lang.String,boolean" />
        </keepclassmembernames>
        
        <!-- Preserve all native method names and the names of their classes. -->

        <keepclasseswithmembernames>
            <method access="native" />
        </keepclasseswithmembernames>
        
        <!-- Preserve the methods that are required in all enumeration classes. -->

        <keepclassmembers extends="java.lang.Enum">
            <method access="public static"
                    type="**[]"
                    name="values"
                    parameters="" />
            <method access="public static"
                    type="**"
                    name="valueOf"
                    parameters="java.lang.String" />
        </keepclassmembers>
        
        <!-- Explicitly preserve all serialization members. The Serializable
             interface is only a marker interface, so it wouldn't save them.
             You can comment this out if your library doesn't use serialization.
             With this code serializable classes will be backward compatible -->

        <keepnames implements="java.io.Serializable"/>
        <keepclassmembers implements="java.io.Serializable">
            <field  access    ="final"
                    type      ="long"
                    name      ="serialVersionUID" />
            <field  access    ="!static !transient"
                    name      ="**"/>
            <field  access    ="!private"
                    name      ="**"/>
            <method access    ="!private"
                    name      ="**"/>
            <method access    ="private"
                    type      ="void"
                    name      ="writeObject"
                    parameters="java.io.ObjectOutputStream" />
            <method access    ="private"
                    type      ="void"
                    name      ="readObject"
                    parameters="java.io.ObjectOutputStream" />
            <method type      ="java.lang.Object"
                    name      ="writeReplace"
                    parameters="" />
            <method type      ="java.lang.Object"
                    name      ="readResolve"
                    parameters="" />
        </keepclassmembers>
        
        <!-- Your application may contain more items that need to be preserved;
             typically classes that are dynamically created using Class.forName -->

    </proguard>
    </target>
</project>
